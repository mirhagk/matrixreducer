using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace MatrixReducer
{
    class LatexWriter
    {
        static string LatexHeader = @"\documentclass[11pt]{article} % use larger type; default would be 10pt
\usepackage[utf8]{inputenc} % set input encoding (not needed with XeLaTeX)
\usepackage{geometry} % to change the page dimensions
\usepackage{amssymb,amsmath}

\title{Solution to your matrix}
\author{autogenerated by Nathan Jervis' Matrix Solver}

\begin{document}
\maketitle
";
        static string LatexFooter = @"\end{document}";
        static void DrawMatrixToLatex(Matrix matrix, ref string LaTeXCode)
        {
            LaTeXCode += @"\begin{equation}
\left\{
    \begin{array}{" + "c".RepeatString(matrix.Columns - 1) + "|cl" + @"}";

            for (int r = 1; r <= matrix.Rows; r++)
            {
                for (int c = 1; c <= matrix.Columns; c++)
                {
                    LaTeXCode += matrix[r, c].ToString() + "&";
                }
                LaTeXCode += "\\\\";
            }

            LaTeXCode += @"\end{array}
\right\}
\end{equation}";

        }
        public static string ProcessMatrixOperations(Matrix matrix)
        {
            string latexCode = LatexHeader;
            latexCode += "Starting matrix\n";
            foreach (var historyEvent in matrix.operationHistory)
            {
                DrawMatrixToLatex(historyEvent.matrixBefore, ref latexCode);
                var swap = historyEvent as MatrixHistory.SwapRows;
                var mult = historyEvent as MatrixHistory.MultiplyRow;
                var addMult = historyEvent as MatrixHistory.AddMultiplesToRow;
                if (swap != null)
                    latexCode += String.Format("Swap rows {0} and {1}\n", swap.fromRow + 1, swap.toRow + 1);
                if (mult != null)
                    latexCode += String.Format("Multiply row {0} by {1}\n", mult.row + 1, mult.factor);
                if (addMult != null)
                    latexCode += string.Format("Add {0} times row {1} to row {2}\n", addMult.factor, addMult.fromRow + 1, addMult.toRow + 1);
            }
            latexCode += "and the final solution is\n";
            DrawMatrixToLatex(matrix, ref latexCode);
            latexCode += LatexFooter;
            return latexCode;
        }
    }
}
